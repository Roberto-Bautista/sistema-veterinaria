/**
 * SISTEMA VETERINARIA - ETAPA 1 DE 3
 * Archivo: script.js
 * Descripci√≥n: Funcionalidades b√°sicas del proyecto base
 * Rama: main/master
 */

// Configuraci√≥n global de la aplicaci√≥n
const AppConfig = {
    version: '1.0',
    stage: 'Etapa 1 de 3',
    projectName: 'Sistema Veterinaria',
    currentBranch: 'main/master',
    branches: {
        base: 'main/master',
        mascotas: 'formulario-registro-mascota',
        productos: 'productos-mascotas'
    },
    developer: 'Tu Nombre Aqu√≠'
};

/**
 * Funci√≥n principal para mostrar secciones
 * @param {string} sectionId - ID de la secci√≥n a mostrar
 */
function showSection(sectionId, event = null) {
    // Ocultar todas las secciones
    const sections = document.querySelectorAll('.section');
    sections.forEach(section => section.classList.remove('active'));

    // Quitar clase active de todos los botones
    const buttons = document.querySelectorAll('.nav-btn');
    buttons.forEach(button => button.classList.remove('active'));

    // Mostrar la secci√≥n seleccionada
    const target = document.getElementById(sectionId);
    if (target) {
        target.classList.add('active');
    }

    // Activar bot√≥n correspondiente si viene de un click
    if (event && event.target) {
        event.target.classList.add('active');
    }
}


/**
 * Funci√≥n para mostrar la fecha actual
 */
function displayCurrentDate() {
    const dateElement = document.getElementById('currentDate');
    if (dateElement) {
        const now = new Date();
        const options = {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            weekday: 'long'
        };
        dateElement.textContent = now.toLocaleDateString('es-ES', options);
    }
}

/**
 * Funci√≥n para validar la estructura del DOM
 */
function validateDOMStructure() {
    const requiredElements = [
        'inicio',
        'mascotas', 
        'productos',
        'currentDate'
    ];

    let allValid = true;
    
    requiredElements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            console.log(`‚úì Elemento '${id}' encontrado`);
        } else {
            console.error(`‚úó Elemento '${id}' NO encontrado`);
            allValid = false;
        }
    });

    return allValid;
}

/**
 * Funci√≥n para mostrar informaci√≥n del proyecto en consola
 */
function showProjectInfo() {
    console.log('='.repeat(50));
    console.log('üìã INFORMACI√ìN DEL PROYECTO');
    console.log('='.repeat(50));
    console.table(AppConfig);
    console.log('='.repeat(50));
    
    console.log('üèóÔ∏è ESTRUCTURA DE RAMAS:');
    Object.entries(AppConfig.branches).forEach(([key, branch]) => {
        const status = key === 'base' ? '‚úÖ COMPLETADA' : '‚è≥ PENDIENTE';
        console.log(`   ${branch} - ${status}`);
    });
    
    console.log('='.repeat(50));
}

/**
 * Funci√≥n para inicializar la aplicaci√≥n
 */
function initApp() {
    console.log('üöÄ Inicializando Sistema Veterinaria...');
    
    try {
        // Mostrar fecha actual
        displayCurrentDate();
        
        // Validar estructura del DOM
        const isValid = validateDOMStructure();
        
        if (isValid) {
            console.log('‚úÖ Aplicaci√≥n inicializada correctamente');
            
            // Mostrar informaci√≥n del proyecto
            showProjectInfo();
            
            // Mensaje de bienvenida
            console.log(`üéØ ${AppConfig.stage}: ${AppConfig.projectName} v${AppConfig.version}`);
            console.log(`üìÇ Rama actual: ${AppConfig.currentBranch}`);
            console.log('üìÅ Archivos cargados: HTML ‚úì, CSS ‚úì, JS ‚úì');
            
        } else {
            console.error('‚ùå Error en la estructura del DOM');
        }
        
    } catch (error) {
        console.error('‚ùå Error al inicializar la aplicaci√≥n:', error);
    }
}

/**
 * Funci√≥n para agregar eventos de teclado
 */
function addKeyboardEvents() {
    document.addEventListener('keydown', function(event) {
        // Navegaci√≥n con teclas num√©ricas
        switch(event.key) {
            case '1':
                showSection('inicio');
                document.querySelector('.nav-btn').classList.add('active');
                break;
            case '2':
                showSection('mascotas');
                break;
            case '3':
                showSection('productos');
                break;
        }
    });
}

/**
 * Funci√≥n para mostrar mensaje de funcionalidad pendiente
 * @param {string} featureName - Nombre de la funcionalidad
 * @param {string} branchName - Nombre de la rama donde se desarrollar√°
 */
function showPendingFeature(featureName, branchName) {
    alert(`üöß Funcionalidad "${featureName}" estar√° disponible en la ${branchName}`);
    console.log(`‚è≥ Funcionalidad pendiente: ${featureName} (${branchName})`);
}

/**
 * Event listener principal - Se ejecuta cuando el DOM est√° listo
 */
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM cargado, iniciando aplicaci√≥n...');
    
    // Inicializar aplicaci√≥n
    initApp();
    
    // Agregar eventos de teclado
    addKeyboardEvents();
    
    // Mensaje final
    console.log('üéâ Sistema Veterinaria - Etapa 1 cargada exitosamente!');
    console.log('üí° Presiona F12 para ver m√°s informaci√≥n en la consola');
    console.log('‚å®Ô∏è  Usa las teclas 1, 2, 3 para navegar entre secciones');
});

/**
 * Funciones de utilidad adicionales
 */

// Funci√≥n para detectar el navegador
function detectBrowser() {
    const userAgent = navigator.userAgent;
    let browser = 'Desconocido';
    
    if (userAgent.includes('Chrome')) browser = 'Chrome';
    else if (userAgent.includes('Firefox')) browser = 'Firefox';
    else if (userAgent.includes('Safari')) browser = 'Safari';
    else if (userAgent.includes('Edge')) browser = 'Edge';
    
    console.log(`üåê Navegador detectado: ${browser}`);
    return browser;
}

// Funci√≥n para mostrar estad√≠sticas del proyecto
function showProjectStats() {
    const stats = {
        'Total de Secciones': document.querySelectorAll('.section').length,
        'Botones de Navegaci√≥n': document.querySelectorAll('.nav-btn').length,
        'Cajas de Informaci√≥n': document.querySelectorAll('.info-box').length,
        'L√≠neas de CSS (aprox.)': '~200',
        'L√≠neas de JS': '~150',
        'Funciones JS': 'showSection, initApp, validateDOMStructure, etc.',
        'Responsive': 'S√≠ (768px, 480px breakpoints)'
    };
    
    console.log('üìä ESTAD√çSTICAS DEL PROYECTO:');
    console.table(stats);
}

// Funci√≥n para validar la integridad de los archivos
function validateFileIntegrity() {
    const checks = {
        'CSS Cargado': !!document.querySelector('link[href*="style.css"]'),
        'JavaScript Ejecutado': typeof showSection === 'function',
        'Elementos de Navegaci√≥n': document.querySelectorAll('.nav-btn').length === 3,
        'Secciones Principales': document.querySelectorAll('.section').length === 3,
        'Fecha Mostrada': !!document.getElementById('currentDate').textContent
    };
    
    console.log('üîç VALIDACI√ìN DE ARCHIVOS:');
    Object.entries(checks).forEach(([check, passed]) => {
        const status = passed ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${check}: ${passed ? 'OK' : 'FALLO'}`);
    });
    
    return Object.values(checks).every(check => check);
}

// Exponer funciones globalmente para debug
window.VetSystem = {
    config: AppConfig,
    showSection: showSection,
    showProjectInfo: showProjectInfo,
    showProjectStats: showProjectStats,
    validateFileIntegrity: validateFileIntegrity,
    detectBrowser: detectBrowser
};

// Ejecutar validaciones adicionales despu√©s de la carga
setTimeout(() => {
    detectBrowser();
    showProjectStats();
    validateFileIntegrity();
    
    console.log('üîß Funciones disponibles globalmente:');
    console.log('   window.VetSystem.showProjectInfo()');
    console.log('   window.VetSystem.showProjectStats()');
    console.log('   window.VetSystem.validateFileIntegrity()');
    console.log('üìù Proyecto listo para la siguiente etapa!');
}, 1000);// Funci√≥n para mostrar secciones
function showSection(sectionId) {
    // Ocultar todas las secciones
    const sections = document.querySelectorAll('.section');
    sections.forEach(section => {
        section.classList.remove('active');
    });

    // Quitar clase active de todos los botones
    const buttons = document.querySelectorAll('.nav-btn');
    buttons.forEach(button => {
        button.classList.remove('active');
    });

    // Mostrar secci√≥n seleccionada
    document.getElementById(sectionId).classList.add('active');
    
    // Activar bot√≥n correspondiente
    event.target.classList.add('active');
}

// Funci√≥n para inicializar la aplicaci√≥n
function initApp() {
    // Mostrar fecha actual
    const dateElement = document.getElementById('currentDate');
    if (dateElement) {
        dateElement.textContent = new Date().toLocaleDateString('es-ES');
    }
    
    // Mensaje en consola
    console.log('Sistema Veterinaria - Proyecto Base v1.0');
    console.log('Rama actual: main/master');
    console.log('Archivos cargados: HTML, CSS, JS separados');
    
    // Verificar que todas las secciones est√°n disponibles
    const sections = ['inicio', 'mascotas', 'productos'];
    sections.forEach(section => {
        const element = document.getElementById(section);
        if (element) {
            console.log(`‚úì Secci√≥n ${section} cargada correctamente`);
        } else {
            console.error(`‚úó Error: Secci√≥n ${section} no encontrada`);
        }
    });
}

// Ejecutar cuando el DOM est√© completamente cargado
document.addEventListener('DOMContentLoaded', initApp);


// Funci√≥n de utilidad para mostrar informaci√≥n del proyecto
function showProjectInfo() {
    console.table(AppConfig);
}